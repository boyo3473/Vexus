local HttpService = game:GetService("HttpService")

local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local crypt = {}

-- Base64 encode
function crypt.base64_encode(data)
    return ((data:gsub('.', function(x)
        local r,bits = '', x:byte()
        for i = 8,1,-1 do
            r = r .. (bits % 2^i - bits % 2^(i-1) > 0 and '1' or '0')
        end
        return r
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if #x < 6 then return '' end
        local c = 0
        for i = 1,6 do
            c = c + (x:sub(i,i) == '1' and 2^(6-i) or 0)
        end
        return b64chars:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data % 3 + 1])
end

-- Base64 decode
function crypt.base64_decode(data)
    data = string.gsub(data, '[^'..b64chars..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f = '', b64chars:find(x) - 1
        for i = 6,1,-1 do
            r = r .. (f % 2^i - f % 2^(i-1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        local c = 0
        for i = 1,8 do
            c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0)
        end
        return string.char(c)
    end))
end

-- Generate random bytes string of given length
function crypt.generatebytes(length)
    assert(type(length) == "number", "number expected")
    local result = {}
    for i = 1, length do
        table.insert(result, string.char(math.random(0, 255)))
    end
    return table.concat(result)
end

-- Generate random key (alias for generatebytes)
function crypt.generatekey(length)
    return crypt.generatebytes(length or 32)
end

-- Dummy hash: returns GUID without dashes for md5, sha1, sha256, sha384 (stub)
function crypt.hash(data, algo)
    assert(type(data) == "string", "string expected")
    algo = string.lower(algo or "sha256")
    if algo == "md5" or algo == "sha1" or algo == "sha256" or algo == "sha384" or algo == "sha512" or algo == "sha3-224" or algo == "sha3-256" or algo == "sha3-512"   then        return HttpService:GenerateGUID(false):gsub("-", "")
    else
        error("Unsupported hash algorithm: " .. algo)
    end
end

-- XOR encryption helper (no IV)
local function xor_data(data, key)
    local result = {}
    for i = 1, #data do
        local k = key:byte((i - 1) % #key + 1)
        local d = data:byte(i)
        table.insert(result, string.char(bit32.bxor(d, k)))
    end
    return table.concat(result)
end

-- Encrypt returns encrypted data and IV
function crypt.encrypt(data, key)
    -- Generate 16-byte random IV
    local iv = crypt.generatebytes(16)
    -- For XOR, combine key and IV to get a combined key
    local combined_key = key .. iv
    -- Encrypt data by XOR with combined_key
    local encrypted = xor_data(data, combined_key)
    -- Return encrypted data and IV separately
    return encrypted, iv
end

-- Decrypt takes encrypted data and IV, returns original data
function crypt.decrypt(encrypted_data, key, iv)
    -- Recreate combined key
    local combined_key = key .. iv
    -- Decrypt by XOR with combined_key
    local decrypted = xor_data(encrypted_data, combined_key)
    return decrypted
end

-- Export to global
getgenv().crypt = crypt
